
-- Setup 
tmp(0) := "0100" & "000" & "000000000";	-- LDI $0, R0 	# RegZero
tmp(1) := "0100" & "010" & "000000000";	-- LDI $0, R2
tmp(2) := "0101" & "000" & "100100000";	-- STA @HEX0, R0 	#Limpando os 7 segmentos
tmp(3) := "0101" & "000" & "100100001";	-- STA @HEX1, R0
tmp(4) := "0101" & "000" & "100100010";	-- STA @HEX2, R0
tmp(5) := "0101" & "000" & "100100011";	-- STA @HEX3, R0
tmp(6) := "0101" & "000" & "100100100";	-- STA @HEX4, R0
tmp(7) := "0101" & "000" & "100100101";	-- STA @HEX5, R0
tmp(8) := "0101" & "000" & "100000000";	-- STA @LEDR7, R0
tmp(9) := "0101" & "000" & "100000001";	-- STA @LEDR8, R0
tmp(10) := "0101" & "000" & "100000010";	-- STA @LEDR9, R0
tmp(11) := "0101" & "000" & "000000000";	-- STA @UNI, R0 
tmp(12) := "0101" & "000" & "000000001";	-- STA @DEC, R0
tmp(13) := "0101" & "000" & "000000010";	-- STA @CEN, R0
tmp(14) := "0101" & "000" & "111111111";	-- STA @CLR0, R0 	#Limpar KEY0
tmp(15) := "0101" & "000" & "111111011";	-- STA @CLRR, R0 	#Limpar FPGA_RESET
tmp(16) := "0100" & "001" & "000000001";	-- LDI $1, R1
tmp(17) := "0101" & "001" & "000000011";	-- STA @VAR1, R1  	#Inicializando constante com 1
tmp(18) := "0100" & "001" & "000001010";	-- LDI $10, R1
tmp(19) := "0101" & "001" & "000000100";	-- STA @VAR10, R1 	#Inicializando constante com 10
tmp(20) := "0101" & "000" & "000000101";	-- STA @ZERO, R0  	#Inicializando constante com 0
tmp(21) := "0101" & "000" & "000010000";	-- STA @COUNT, R0 	#Inicia contador com 0

-- Loop 
tmp(22) := "0001" & "010" & "101100100";	-- LDA @FPGA_RESET, R2 	#Le FPGA_RESET e escreve em R2
tmp(23) := "1000" & "010" & "000000011";	-- CEQ @VAR1, R2 	#Compara FPGA_RESET com 1
tmp(24) := "0111" & "000" & "000000000";	-- JEQ @Setup 	#Desvia para o inicio
tmp(25) := "0001" & "001" & "101100000";	-- LDA @KEY0, R1 	#Le KEY0 e escreve em R1
tmp(26) := "1000" & "001" & "000000101";	-- CEQ @ZERO, R1 	#Compara KEY0 com 0
tmp(27) := "0111" & "000" & "000010110";	-- JEQ @Loop 	#Se nao apertou o KEY0 volta
tmp(28) := "1001" & "000" & "000011110";	-- JSR @Incrementa 	#Se apertou vai para Incrementa
tmp(29) := "0110" & "000" & "000110101";	-- JMP @Escreve 	#Pula para escreve

-- Incrementa 
tmp(30) := "0101" & "000" & "111111111";	-- STA @CLR0, R0 	#Limpa KEY0
tmp(31) := "0001" & "001" & "000000000";	-- LDA @UNI, R1 	#Carrega o valor da unidade 
tmp(32) := "1110" & "001" & "000000001";	-- ADDI $1, R1 	#Soma 1 com valor de R1 e salva em R1
tmp(33) := "1000" & "001" & "000000100";	-- CEQ @VAR10, R1 	#Compara 10 com o valor de R1
tmp(34) := "0111" & "000" & "000100101";	-- JEQ @IncDec 	#Se R1 == 10 pula
tmp(35) := "0101" & "001" & "000000000";	-- STA @UNI, R1 	#Se nao escreve na unidade
tmp(36) := "1010" & "000" & "000000000";	-- RET

-- IncDec 
tmp(37) := "0101" & "000" & "000000000";	-- STA @UNI, R0 	#zera a unidade
tmp(38) := "0001" & "001" & "000000001";	-- LDA @DEC, R1 	#Carrega o valor da dezena
tmp(39) := "1110" & "001" & "000000001";	-- ADDI $1, R1 	#Soma 1 com valor de R1 e salva em R1
tmp(40) := "1000" & "001" & "000000100";	-- CEQ @VAR10, R1 	#Compara 10 com o valor de R1
tmp(41) := "0111" & "000" & "000101100";	-- JEQ @IncCen 	#Se R1 == 10 pula
tmp(42) := "0101" & "001" & "000000001";	-- STA @DEC, R1 	#Se nao escreve na dezena
tmp(43) := "1010" & "000" & "000000000";	-- RET

-- IncCen 
tmp(44) := "0101" & "000" & "000000001";	-- STA @DEC, R0 	#zera a dezena
tmp(45) := "0001" & "001" & "000000010";	-- LDA @CEN, R1 	#Carrega o valor da centena
tmp(46) := "1110" & "001" & "000000001";	-- ADDI $1, R1 	#Soma 1 com valor de R1 e salva em R1
tmp(47) := "1000" & "001" & "000000100";	-- CEQ @VAR10, R1 	#Compara 10 com o valor de R1
tmp(48) := "0111" & "000" & "000110011";	-- JEQ @IncMil 	#Se R1 == 10 pula
tmp(49) := "0101" & "001" & "000000010";	-- STA @CEN, R1 	#Se nao escreve na centena
tmp(50) := "1010" & "000" & "000000000";	-- RET

-- IncMil 
tmp(51) := "0101" & "000" & "000000001";	-- STA @DEC, R0 	#zera a dezena
tmp(52) := "1010" & "000" & "000000000";	-- RET

-- Escreve 
tmp(53) := "0001" & "001" & "000000000";	-- LDA @UNI, R1 	#Carrega acumulador com valor da unidade
tmp(54) := "0101" & "001" & "100100000";	-- STA @HEX0, R1 	#Carrega unidade no HEX0
tmp(55) := "0001" & "001" & "000000001";	-- LDA @DEC, R1 	#Carrega acumulador com valor da dezena
tmp(56) := "0101" & "001" & "100100001";	-- STA @HEX1, R1 	#Carrega dezena no HEX1
tmp(57) := "0001" & "001" & "000000010";	-- LDA @CEN, R1 	#Carrega acumulador com valor da centena
tmp(58) := "0101" & "001" & "100100010";	-- STA @HEX2, R1 	#Carrega centena no HEX2
tmp(59) := "0110" & "000" & "000010110";	-- JMP @Loop 	#Reiniciar Loop
